서론:
해당 알고리즘 문제는 틱택톡의 유효성을 판별하는 문제이다.

틱택톡은 X가 먼저 시작하는 것으로 구분된다.

현재 틱택톡 판을 보고 그 판이 유효한 최종상태인지 아닌지 판별해야한다.
	여기서 유효한 이라는 것은 일반적으로 도출이 가능한 게임판의 상태를 의미한다.
	여기서 최종상태 라는 것은 더이상 게임을 진행 할 수 없는 상태를 의미한다.

의미를 다시 정의하면 해당 알고리즘은 틱택톡의 판을 받아들여 일반적으로 진행 했을 때 더이상 진행이 가능한지 아닌지를 판별해야한다.




본론 :
최종상태 판별은 총 4단계로 이뤄진다.
	0.X와 O모두 이기지 않았다. == !(isXWin&&isOWin)
	1.X가 이겼다. == (isXWin)
	2.O가 이겼다. == (isOWin)
	3.X와O모두 이기지 못하고 틱택톡 판이 모두 채워진 상태로 끝이 났다. == (!isXWin&&!isOWin&&isFullMatrix)

유효한지 아닌지의 판별은 최종상태 판별에서 덧붙여서 이뤄진다.
	1.1. X가 이겼을때 X가 먼저 진행했으므로 X와 O의 차이는 1이 되어야한다.
	2.1 O가 이겼을때 X가 먼저 진행했으므로 X와 O의 차이는 0이 되어야한다.
	3.1 누구도 이기지 못하면 X가 먼저 진행했으므로 X와 O의 차이는 1이 되어야한다.
이를 간단하게 표기하겠다.
	1.1 diff==1
	2.2 diff==0
	3.1 diff=1

그러면 유효한 최종상태 판별은 다음과 같이 이뤄진다.
	0.X와 O모두 이기지 않았다.
	1.X가 이겼다.&&diff==1
	2.O가 이겼다.&&diff=0
	3.X와O모두 이기지 못하고 틱택톡 판이 모두 채워진 상태로 끝이 났다.&&diff==1

이러한 4단계를 모두 거친 다음에도 남는 것은 유효하지 않는 틱택톡판이라고 판별한다.

해당 본론1의 내용은 isValid함수(110Line)를 참고해라.

부가 내용:

나는 틱택톡을 문자열로 받았다. 이를 동적할당을 통해 2차원 매트릭스로 구현하고 이를 반환하여 판별한다. 그리고 메모리  할당을 제거하는 방식으로 구현했다.
이렇게 한 이유는 다음과 같다.
	1. 입력값이 문자열을 통해 받기 쉬워서
	2. 전역변수로 매트릭스를 만들어 할당할 수도 있지만, 무분별한 전역변수 사용은 좋지 않기때문에 동적할당을 통했다.

이렇게 함으로써 전역변수를 사용하지 않아 안정성을 얻을 수도 있겠으나, 다른 C++정답에 비해 매우 느린 속도가 되었다.(다른 것은 0ms 내껀 4ms).
이를 생각해보면 매트릭스를 만들때마다 함수를 호출하기에 시간이 느려지는것 같다.

그 외에도 시간측면에서는 isValid함수에서  isXWin과 isOWin함수를 자주 부르는 것을 확인 할 수 있다.
만일 주기적으로 부르지 않고, 한번에 불러서 미리 값을 지정하고 그에 따라 판별에 사용했으면 함수 호출로 인한 오버헤드를 줄여 더 빠르게 구동이 됐을것 같다.
 
